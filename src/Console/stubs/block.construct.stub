<?php

namespace DummyNamespace;

use Log1x\AcfComposer\Block;
use Roots\Acorn\Application;
use StoutLogic\AcfBuilder\FieldsBuilder;

class DummyClass extends Block
{
    public function __construct(Application $app)
    {
        parent::__construct($app);

        $this->name = __('DummyClass', 'sage');
        $this->slug = 'DummySnake';
        $this->description = __('A simple DummyClass block.', 'sage');
        $this->category = 'formatting';
        $this->icon = 'editor-ul';
        $this->keywords = [];
        $this->post_types = [];
        $this->parent = [];
        $this->mode = 'preview';
        $this->align = '';
        $this->align_text = '';
        $this->align_content = '';
        $this->supports = [
            'align' => true,
            'align_text' => false,
            'align_content' => false,
            'mode' => false,
            'multiple' => true,
            'jsx' => true,
        ];
        $this->styles = [
            [
                'name' => 'light',
                'label' => __('Light', 'sage'),
                'isDefault' => true,
            ],
            [
                'name' => 'dark',
                'label' => __('Dark', 'sage'),
            ]
        ];
        $this->example = [
            'items' => [
                ['item' => 'Item one'],
                ['item' => 'Item two'],
                ['item' => 'Item three'],
            ],
        ];
    }

    /**
     * Data to be passed to the block before rendering.
     *
     * @return array
     */
    public function with()
    {
        return [
            'items' => $this->items(),
        ];
    }

    /**
     * The block field group.
     *
     * @return array
     */
    public function fields()
    {
        $DummyCamel = new FieldsBuilder('DummySnake');

        $DummyCamel
            ->addRepeater('items')
                ->addText('item')
            ->endRepeater();

        return $DummyCamel->build();
    }

    /**
     * Return the items field.
     *
     * @return array
     */
    public function items()
    {
        return get_field('items') ?: $this->example['items'];
    }

    /**
     * Assets to be enqueued when rendering the block.
     *
     * @return void
     */
    public function enqueue()
    {
        //
    }
}
